/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TheTeamImport } from './routes/the-team'
import { Route as TheStackImport } from './routes/the-stack'
import { Route as PosterImport } from './routes/poster'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const TheTeamRoute = TheTeamImport.update({
  id: '/the-team',
  path: '/the-team',
  getParentRoute: () => rootRoute,
} as any)

const TheStackRoute = TheStackImport.update({
  id: '/the-stack',
  path: '/the-stack',
  getParentRoute: () => rootRoute,
} as any)

const PosterRoute = PosterImport.update({
  id: '/poster',
  path: '/poster',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/poster': {
      id: '/poster'
      path: '/poster'
      fullPath: '/poster'
      preLoaderRoute: typeof PosterImport
      parentRoute: typeof rootRoute
    }
    '/the-stack': {
      id: '/the-stack'
      path: '/the-stack'
      fullPath: '/the-stack'
      preLoaderRoute: typeof TheStackImport
      parentRoute: typeof rootRoute
    }
    '/the-team': {
      id: '/the-team'
      path: '/the-team'
      fullPath: '/the-team'
      preLoaderRoute: typeof TheTeamImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/poster': typeof PosterRoute
  '/the-stack': typeof TheStackRoute
  '/the-team': typeof TheTeamRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/poster': typeof PosterRoute
  '/the-stack': typeof TheStackRoute
  '/the-team': typeof TheTeamRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/poster': typeof PosterRoute
  '/the-stack': typeof TheStackRoute
  '/the-team': typeof TheTeamRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/poster' | '/the-stack' | '/the-team'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/poster' | '/the-stack' | '/the-team'
  id: '__root__' | '/' | '/poster' | '/the-stack' | '/the-team'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PosterRoute: typeof PosterRoute
  TheStackRoute: typeof TheStackRoute
  TheTeamRoute: typeof TheTeamRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PosterRoute: PosterRoute,
  TheStackRoute: TheStackRoute,
  TheTeamRoute: TheTeamRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/poster",
        "/the-stack",
        "/the-team"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/poster": {
      "filePath": "poster.tsx"
    },
    "/the-stack": {
      "filePath": "the-stack.tsx"
    },
    "/the-team": {
      "filePath": "the-team.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
